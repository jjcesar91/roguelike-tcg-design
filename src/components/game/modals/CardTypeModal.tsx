import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Hand, Swords, Star, Crown, Skull, User, CircleDotDashed } from 'lucide-react';
import { CardType } from '@/types/game';

interface CardTypeModalProps {
  isOpen: boolean;
  onOpenChange: (open: boolean) => void;
  cardType: CardType;
}

export const CardTypeModal: React.FC<CardTypeModalProps> = ({
  isOpen,
  onOpenChange,
  cardType
}) => {
  const getTypeInfo = (type: CardType) => {
    const typeStr = String(type).toLowerCase();
    switch (typeStr) {
      case 'melee':
        return {
          name: 'Melee',
          icon: <Hand className="w-16 h-16" />,
          color: 'bg-red-800 text-red-100 border-red-900',
          description: 'Close-range combat cards that typically deal physical damage.',
          mechanics: [
            'Melee cards often have moderate damage and energy costs',
            'Many melee cards include additional effects like block or status application',
            'Effective against most enemies but may be blocked by high defense',
            'Common in warrior and rogue class decks'
          ]
        };
      case 'attack':
        return {
          name: 'Attack',
          icon: <Swords className="w-16 h-16" />,
          color: 'bg-orange-800 text-orange-100 border-orange-900',
          description: 'Offensive cards designed to deal damage to enemies.',
          mechanics: [
            'Attack cards form the primary damage source in combat',
            'Damage can be modified by strength, weak, and other status effects',
            'Some attack cards have special conditions or bonus effects',
            'Essential for defeating opponents quickly'
          ]
        };
      case 'skill':
        return {
          name: 'Skill',
          icon: <Star className="w-16 h-16" />,
          color: 'bg-blue-800 text-blue-100 border-blue-900',
          description: 'Versatile cards that provide utility, defense, or special effects.',
          mechanics: [
            'Skill cards often provide block, draw cards, or apply status effects',
            'Typically more flexible than attack cards',
            'Can be used defensively or offensively depending on the situation',
            'Important for maintaining board control and survivability'
          ]
        };
      case 'power':
        return {
          name: 'Power',
          icon: <Crown className="w-16 h-16" />,
          color: 'bg-purple-800 text-purple-100 border-purple-900',
          description: 'Powerful cards with significant effects, often at higher energy costs.',
          mechanics: [
            'Power cards usually have strong, game-changing effects',
            'Higher energy costs reflect their increased power',
            'Can turn the tide of battle when used at the right moment',
            'Often include area effects, healing, or major status applications'
          ]
        };
      case 'curse':
        return {
          name: 'Curse',
          icon: <Skull className="w-16 h-16" />,
          color: 'bg-amber-800 text-amber-100 border-amber-900',
          description: 'Negative cards that impose penalties or drawbacks.',
          mechanics: [
            'Curse cards are typically unwanted and clog your hand',
            'They may cost energy to play with no benefit or negative effects',
            'Some curses can be removed through specific card effects',
            'Generally avoided unless part of a specific strategy'
          ]
        };
      case 'minion':
        return {
          name: 'Minion',
          icon: <User className="w-16 h-16" />,
          color: 'bg-green-800 text-green-100 border-green-900',
          description: 'Unplayable cards that trigger effects when drawn into your hand.',
          mechanics: [
            'Minion cards cannot be played manually and cost 0 energy',
            'They automatically trigger their effects when drawn into your hand',
            'Common effects include dealing damage or applying status effects',
            'These cards are typically added to your deck by opponent abilities'
          ]
        };
      case 'volatile':
        return {
          name: 'Volatile',
          icon: <CircleDotDashed className="w-16 h-16" />,
          color: 'bg-yellow-600 text-yellow-100 border-yellow-700',
          description: 'Special cards that are burned (removed from game) when played.',
          mechanics: [
            'Volatile cards do not go to the discard pile when played',
            'Instead, they are permanently removed from the game (burned)',
            'Often used for temporary or one-time effects',
            'Typically generated by passives or special abilities rather than being in starting decks'
          ]
        };
      default:
        return {
          name: String(type).charAt(0).toUpperCase() + String(type).slice(1),
          icon: <span className="text-4xl font-bold">?</span>,
          color: 'bg-gray-800 text-gray-100 border-gray-900',
          description: 'Unknown card type.',
          mechanics: ['No mechanics information available.']
        };
    }
  };

  const typeInfo = getTypeInfo(cardType);

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent 
        className="max-w-md"
        onClick={(e) => e.stopPropagation()}
      >
        <DialogHeader>
          <DialogTitle className="text-center text-xl">
            {typeInfo.name}
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Large centered icon */}
          <div className="flex justify-center">
            <div className={`p-6 rounded-full ${typeInfo.color}`}>
              {typeInfo.icon}
            </div>
          </div>
          
          <div>
            <h4 className="font-semibold text-sm text-muted-foreground mb-2">Description</h4>
            <p className="text-sm text-center">{typeInfo.description}</p>
          </div>
          
          <div>
            <h4 className="font-semibold text-sm text-muted-foreground mb-2">Mechanics</h4>
            <ul className="text-sm space-y-1">
              {typeInfo.mechanics.map((mechanic, index) => (
                <li key={index} className="flex items-start gap-2">
                  <span className="text-muted-foreground mt-1">â€¢</span>
                  {mechanic}
                </li>
              ))}
            </ul>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};